package com.you.pentest.controller;

import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import com.you.pentest.baseClass.NormalInputCache;

public class createDicController implements Controller{
	// 日志变量
	Logger logger = Logger.getLogger(createDicController.class);
	// 全局变量
	private ArrayList<String> dicList=null;
	private String message;
	private NormalInputCache nic=null;
	// 默认线程数
	private int threadCount = 4;
	// 选择的分类
	private String[] category;
	// 字典长度
	private int dicLength = 0;
	// 输出类型
	private String outputType = null;
	
	private String path=null;
	private static final String num[] = {"0","1","2","3","4","5","6","7","8","9"};
	private static final String lowCase[] = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","y","v","w","x","y","z"};
	private static final String upCase[] = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","Y","V","W","X","Y","Z"};
	private static final String special[] = {"!","@","#","$","%","^","&","*"};
	@Override
	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		getInputDate(request);
		// 创建线程池
		ExecutorService fixedThreadPool = Executors.newFixedThreadPool(threadCount);
		
		fixedThreadPool.execute(new Runnable() {
			
			@Override
			public void run() {
				createDic();
			}
		});
		return  new ModelAndView("createDicList","message",message);
	}
	private void getInputDate(HttpServletRequest request) {
		try {
			// 获取组合
			category = request.getParameterValues("category");
			if (category != null){
				System.out.println("类型====="+category[0]);
			}
			// 获取长度
			dicLength = Integer.valueOf(request.getParameter("dicLength"));
			// 获取线程个数
			threadCount = Integer.valueOf("".equals(request.getParameter("threadCount"))?String.valueOf(threadCount):request.getParameter("threadCount"));
			// 获取输出类型
			outputType = request.getParameter("outputType");
			
			nic=new NormalInputCache(category, dicLength, threadCount, outputType);
		} catch (Exception e) {
			logger.error("getInputDate -> 获取页面输入值出错");
			e.printStackTrace();
		}

	}
    private void createDic(){
    	int typeLength=category.length;
    	switch (typeLength) {
		case 0:	
			message="请选择一个类型";
			break;
		case 1:	
			if ("number".equals(category[0])){
			    
			} else if("lowerCase".equals(category[0])){
				
			} else if ("upperCase".equals(category[0])){
				
			} else {
				
			}
			message="请选择一个类型";
			break;
		case 2:	
			// 选择了数字
			if (category.toString().indexOf("number") != -1){
				// 并且选择了小写字母
				if (category.toString().indexOf("lowerCase") != -1){
					message="你选择了数字加小写字母";
				}
                if (category.toString().indexOf("upperCase") != -1){
                	message="你选择了数字加大写字母";
				}
                if (category.toString().indexOf("special") != -1){
                	message="你选择了数字加特殊字符";
				}
			}
			// 选择了小写字母
			if (category.toString().indexOf("lowerCase") != -1){
				// // 并且选择了大写字母
                if (category.toString().indexOf("upperCase") != -1){
                	message="你选择了小写字母加大写字母";
				}
                if (category.toString().indexOf("special") != -1){
                	message="你选择了小写字母加特殊字符";
				}
			}
			if (category.toString().indexOf("upperCase") != -1){
				message="你选择了大写字母加特殊字符";
			}
			break;
		case 3:	
			break;
		case 4:	
			break;

		default:
			break;
		}
    	
    }
}
